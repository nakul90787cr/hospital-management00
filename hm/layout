import React, { useState, useEffect } from "react";
import { Link, useLocation } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { base44 } from "@/api/base44Client";
import {
  LayoutDashboard,
  Users,
  Calendar,
  LogOut,
  Menu,
  X,
  Activity,
  Sparkles,
  Zap,
  Moon,
  Sun
} from "lucide-react";
import { motion, AnimatePresence } from "framer-motion";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import BiometricPulse from "./components/medical/BiometricPulse";
import { useTheme, ThemeProvider } from "./contexts/ThemeContext";

function LayoutContent({ children }) {
  const location = useLocation();
  const [user, setUser] = useState(null);
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const { theme, toggleTheme } = useTheme();

  useEffect(() => {
    loadUser();
  }, []);

  const loadUser = async () => {
    try {
      const userData = await base44.auth.me();
      setUser(userData);
    } catch (error) {
      console.error("User not logged in");
    }
  };

  const handleLogout = async () => {
    await base44.auth.logout();
  };

  const navigationItems = [
    {
      title: "Dashboard",
      url: createPageUrl("Dashboard"),
      icon: LayoutDashboard,
      gradient: "from-indigo-500 to-violet-500"
    },
    {
      title: "Patients",
      url: createPageUrl("Patients"),
      icon: Users,
      gradient: "from-cyan-500 to-blue-500"
    },
    {
      title: "Appointments",
      url: createPageUrl("Appointments"),
      icon: Calendar,
      gradient: "from-emerald-500 to-teal-500"
    },
    {
      title: "3D Visualization",
      url: createPageUrl("ShaderDemo"),
      icon: Sparkles,
      gradient: "from-violet-500 to-purple-500"
    }
  ];

  const roleColors = {
    Doctor: "from-indigo-500 to-violet-500",
    Nurse: "from-emerald-500 to-teal-500",
    Admin: "from-violet-500 to-purple-500"
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-50 via-violet-50 to-cyan-50 dark:from-gray-900 dark:via-indigo-950 dark:to-gray-900">
      {/* Mobile Header */}
      <motion.header
        initial={{ y: -100 }}
        animate={{ y: 0 }}
        className="md:hidden fixed top-0 left-0 right-0 z-50 backdrop-blur-md bg-white/80 dark:bg-gray-900/80 border-b border-gray-200/50 dark:border-gray-700/50 shadow-lg"
      >
        <div className="flex items-center justify-between p-4">
          <div className="flex items-center gap-3">
            <motion.button
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.95 }}
              onClick={() => setSidebarOpen(true)}
              className="p-2 rounded-2xl bg-gradient-to-br from-indigo-500 to-violet-500 text-white shadow-lg"
            >
              <Menu className="w-5 h-5" />
            </motion.button>
            <div className="flex items-center gap-2">
              <div className="w-8 h-8 rounded-2xl bg-gradient-to-br from-indigo-500 to-violet-500 flex items-center justify-center">
                <Activity className="w-5 h-5 text-white" />
              </div>
              <h1 className="text-xl font-bold bg-gradient-to-r from-indigo-600 to-violet-600 bg-clip-text text-transparent">
                MediFlow
              </h1>
            </div>
          </div>
          {user && (
            <Badge className={`bg-gradient-to-r ${roleColors[user.role] || roleColors.Admin} text-white border-0 px-3 py-1`}>
              {user.role}
            </Badge>
          )}
        </div>
      </motion.header>

      {/* Desktop Sidebar */}
      <motion.aside
        initial={{ x: -300 }}
        animate={{ x: 0 }}
        className="hidden md:block fixed left-0 top-0 bottom-0 w-72 backdrop-blur-md bg-white/80 dark:bg-gray-900/80 border-r border-gray-200/50 dark:border-gray-700/50 shadow-2xl z-40"
      >
        <div className="flex flex-col h-full">
          {/* Logo */}
          <div className="p-6 border-b border-gray-200/50 dark:border-gray-700/50">
            <motion.div
              whileHover={{ scale: 1.05 }}
              className="flex items-center gap-3 cursor-pointer"
            >
              <motion.div
                className="w-12 h-12 rounded-2xl bg-gradient-to-br from-indigo-500 via-violet-500 to-cyan-500 p-[2px] shadow-xl"
                animate={{
                  boxShadow: [
                    "0 0 20px rgba(99, 102, 241, 0.3)",
                    "0 0 40px rgba(139, 92, 246, 0.5)",
                    "0 0 20px rgba(99, 102, 241, 0.3)"
                  ]
                }}
                transition={{ duration: 3, repeat: Infinity }}
              >
                <div className="w-full h-full rounded-2xl bg-white dark:bg-gray-900 flex items-center justify-center">
                  <Activity className="w-6 h-6 text-violet-600" />
                </div>
              </motion.div>
              <div>
                <h2 className="text-xl font-bold bg-gradient-to-r from-indigo-600 to-violet-600 bg-clip-text text-transparent">
                  MediFlow AI
                </h2>
                <p className="text-xs text-gray-500 dark:text-gray-400 flex items-center gap-1">
                  <Zap className="w-3 h-3 text-amber-500" />
                  Advanced Healthcare
                </p>
              </div>
            </motion.div>
          </div>

          {/* Navigation */}
          <nav className="flex-1 p-4 space-y-2 overflow-y-auto">
            {navigationItems.map((item, index) => {
              const isActive = location.pathname === item.url;
              return (
                <motion.div
                  key={item.title}
                  initial={{ opacity: 0, x: -20 }}
                  animate={{ opacity: 1, x: 0 }}
                  transition={{ delay: index * 0.1 }}
                >
                  <Link to={item.url}>
                    <motion.div
                      whileHover={{ scale: 1.02, x: 4 }}
                      whileTap={{ scale: 0.98 }}
                      className={`flex items-center gap-3 px-4 py-3 rounded-2xl transition-all duration-300 ${
                        isActive
                          ? `bg-gradient-to-r ${item.gradient} text-white shadow-lg`
                          : 'hover:bg-gray-100 dark:hover:bg-gray-800/50 text-gray-700 dark:text-gray-300'
                      }`}
                    >
                      <item.icon className="w-5 h-5" />
                      <span className="font-medium">{item.title}</span>
                      {isActive && (
                        <motion.div
                          layoutId="activeIndicator"
                          className="ml-auto w-2 h-2 rounded-full bg-white"
                        />
                      )}
                    </motion.div>
                  </Link>
                </motion.div>
              );
            })}
          </nav>

          {/* Theme Toggle */}
          <div className="px-4 pb-4">
            <motion.button
              whileHover={{ scale: 1.02 }}
              whileTap={{ scale: 0.98 }}
              onClick={toggleTheme}
              className="w-full flex items-center gap-3 px-4 py-3 rounded-2xl bg-gradient-to-r from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-700 hover:from-gray-200 hover:to-gray-300 dark:hover:from-gray-700 dark:hover:to-gray-600 text-gray-700 dark:text-gray-300 transition-all shadow-md"
            >
              {theme === 'dark' ? (
                <>
                  <Sun className="w-5 h-5 text-amber-500" />
                  <span className="font-medium">Light Mode</span>
                </>
              ) : (
                <>
                  <Moon className="w-5 h-5 text-indigo-500" />
                  <span className="font-medium">Dark Mode</span>
                </>
              )}
            </motion.button>
          </div>

          {/* User Profile */}
          {user && (
            <div className="p-4 border-t border-gray-200/50 dark:border-gray-700/50">
              <motion.div
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="mb-4 p-4 rounded-2xl bg-gradient-to-br from-indigo-50 to-violet-50 dark:from-gray-800 dark:to-indigo-900/30 border border-indigo-200/50 dark:border-indigo-700/50"
              >
                <div className="flex items-center gap-3 mb-3">
                  <motion.div
                    whileHover={{ scale: 1.1, rotate: 5 }}
                    className={`w-12 h-12 rounded-2xl bg-gradient-to-br ${roleColors[user.role] || roleColors.Admin} flex items-center justify-center shadow-lg`}
                  >
                    <span className="text-white font-bold text-lg">
                      {user.full_name?.charAt(0) || 'U'}
                    </span>
                  </motion.div>
                  <div className="flex-1 min-w-0">
                    <p className="font-bold text-gray-900 dark:text-white truncate">
                      {user.full_name}
                    </p>
                    <Badge className={`bg-gradient-to-r ${roleColors[user.role] || roleColors.Admin} text-white border-0 mt-1 text-xs px-2 py-0.5`}>
                      {user.role}
                    </Badge>
                  </div>
                </div>
                <div className="h-8 opacity-30">
                  <BiometricPulse />
                </div>
              </motion.div>
              <motion.div whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>
                <Button
                  onClick={handleLogout}
                  className="w-full bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 text-white shadow-lg rounded-2xl"
                >
                  <LogOut className="w-4 h-4 mr-2" />
                  Logout
                </Button>
              </motion.div>
            </div>
          )}
        </div>
      </motion.aside>

      {/* Mobile Sidebar Overlay */}
      <AnimatePresence>
        {sidebarOpen && (
          <>
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              exit={{ opacity: 0 }}
              onClick={() => setSidebarOpen(false)}
              className="md:hidden fixed inset-0 bg-black/50 backdrop-blur-sm z-50"
            />
            <motion.aside
              initial={{ x: -300 }}
              animate={{ x: 0 }}
              exit={{ x: -300 }}
              transition={{ type: "spring", damping: 25 }}
              className="md:hidden fixed left-0 top-0 bottom-0 w-72 backdrop-blur-md bg-white/95 dark:bg-gray-900/95 shadow-2xl z-50"
            >
              <div className="flex flex-col h-full">
                <div className="flex items-center justify-between p-4 border-b border-gray-200/50">
                  <div className="flex items-center gap-2">
                    <div className="w-10 h-10 rounded-2xl bg-gradient-to-br from-indigo-500 to-violet-500 flex items-center justify-center">
                      <Activity className="w-6 h-6 text-white" />
                    </div>
                    <h2 className="text-xl font-bold bg-gradient-to-r from-indigo-600 to-violet-600 bg-clip-text text-transparent">
                      MediFlow AI
                    </h2>
                  </div>
                  <motion.button
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                    onClick={() => setSidebarOpen(false)}
                    className="p-2 rounded-xl hover:bg-gray-100 dark:hover:bg-gray-800"
                  >
                    <X className="w-5 h-5" />
                  </motion.button>
                </div>

                <nav className="flex-1 p-4 space-y-2 overflow-y-auto">
                  {navigationItems.map((item) => {
                    const isActive = location.pathname === item.url;
                    return (
                      <Link key={item.title} to={item.url} onClick={() => setSidebarOpen(false)}>
                        <motion.div
                          whileHover={{ scale: 1.02, x: 4 }}
                          className={`flex items-center gap-3 px-4 py-3 rounded-2xl ${
                            isActive
                              ? `bg-gradient-to-r ${item.gradient} text-white shadow-lg`
                              : 'hover:bg-gray-100 dark:hover:bg-gray-800 text-gray-700 dark:text-gray-300'
                          }`}
                        >
                          <item.icon className="w-5 h-5" />
                          <span className="font-medium">{item.title}</span>
                        </motion.div>
                      </Link>
                    );
                  })}
                </nav>

                {/* Theme Toggle - Mobile */}
                <div className="px-4 pb-4">
                  <motion.button
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={toggleTheme}
                    className="w-full flex items-center gap-3 px-4 py-3 rounded-2xl bg-gradient-to-r from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-700 text-gray-700 dark:text-gray-300 transition-all"
                  >
                    {theme === 'dark' ? (
                      <>
                        <Sun className="w-5 h-5 text-amber-500" />
                        <span className="font-medium">Light Mode</span>
                      </>
                    ) : (
                      <>
                        <Moon className="w-5 h-5 text-indigo-500" />
                        <span className="font-medium">Dark Mode</span>
                      </>
                    )}
                  </motion.button>
                </div>

                {user && (
                  <div className="p-4 border-t border-gray-200/50">
                    <div className="mb-4 p-4 rounded-2xl bg-gradient-to-br from-indigo-50 to-violet-50 dark:from-gray-800 dark:to-indigo-900/30">
                      <div className="flex items-center gap-3">
                        <div className={`w-12 h-12 rounded-2xl bg-gradient-to-br ${roleColors[user.role] || roleColors.Admin} flex items-center justify-center shadow-lg`}>
                          <span className="text-white font-bold text-lg">
                            {user.full_name?.charAt(0) || 'U'}
                          </span>
                        </div>
                        <div>
                          <p className="font-bold text-gray-900 dark:text-white">
                            {user.full_name}
                          </p>
                          <Badge className={`bg-gradient-to-r ${roleColors[user.role] || roleColors.Admin} text-white border-0 text-xs`}>
                            {user.role}
                          </Badge>
                        </div>
                      </div>
                    </div>
                    <Button
                      onClick={handleLogout}
                      className="w-full bg-gradient-to-r from-red-500 to-pink-500 hover:from-red-600 hover:to-pink-600 text-white shadow-lg rounded-2xl"
                    >
                      <LogOut className="w-4 h-4 mr-2" />
                      Logout
                    </Button>
                  </div>
                )}
              </div>
            </motion.aside>
          </>
        )}
      </AnimatePresence>

      {/* Main Content */}
      <main className="md:ml-72 min-h-screen pt-16 md:pt-0">
        {children}
      </main>
    </div>
  );
}

export default function Layout({ children }) {
  return (
    <ThemeProvider>
      <LayoutContent>{children}</LayoutContent>
    </ThemeProvider>
  );
}