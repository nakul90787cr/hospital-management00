import React from 'react';
import { motion } from 'framer-motion';

export default function NeuralNetwork({ className = "" }) {
  const nodes = [
    { x: 20, y: 30 },
    { x: 50, y: 20 },
    { x: 50, y: 50 },
    { x: 80, y: 30 },
    { x: 35, y: 35 },
    { x: 65, y: 35 }
  ];

  const connections = [
    [0, 4], [0, 1], [0, 2],
    [1, 5], [2, 5],
    [4, 5],
    [5, 3]
  ];

  return (
    <div className={`relative ${className}`}>
      <svg viewBox="0 0 100 60" className="w-full h-full">
        <defs>
          <linearGradient id="neuralGradient" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" stopColor="#6366f1" />
            <stop offset="100%" stopColor="#06b6d4" />
          </linearGradient>
          <filter id="glow">
            <feGaussianBlur stdDeviation="2" result="coloredBlur"/>
            <feMerge>
              <feMergeNode in="coloredBlur"/>
              <feMergeNode in="SourceGraphic"/>
            </feMerge>
          </filter>
        </defs>

        {connections.map((conn, i) => (
          <motion.line
            key={i}
            x1={nodes[conn[0]].x}
            y1={nodes[conn[0]].y}
            x2={nodes[conn[1]].x}
            y2={nodes[conn[1]].y}
            stroke="url(#neuralGradient)"
            strokeWidth="1"
            strokeOpacity="0.4"
            initial={{ pathLength: 0 }}
            animate={{ 
              pathLength: [0, 1],
              strokeOpacity: [0.2, 0.6, 0.2]
            }}
            transition={{
              duration: 3,
              repeat: Infinity,
              delay: i * 0.2
            }}
          />
        ))}

        {nodes.map((node, i) => (
          <motion.circle
            key={i}
            cx={node.x}
            cy={node.y}
            r="3"
            fill="url(#neuralGradient)"
            filter="url(#glow)"
            initial={{ scale: 0.5, opacity: 0.3 }}
            animate={{ 
              scale: [0.8, 1.3, 0.8],
              opacity: [0.5, 1, 0.5]
            }}
            transition={{
              duration: 2,
              repeat: Infinity,
              delay: i * 0.15
            }}
          />
        ))}
      </svg>
    </div>
  );
}