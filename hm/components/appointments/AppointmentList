import React from 'react';
import { motion } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Skeleton } from "@/components/ui/skeleton";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Calendar, Clock, User, Stethoscope, Edit, Trash2, MoreVertical, CheckCircle, XCircle } from "lucide-react";
import { format } from "date-fns";

export default function AppointmentList({ appointments, isLoading, onEdit, onDelete, onStatusChange, canModify }) {
  const statusColors = {
    Scheduled: "bg-blue-100 text-blue-800 border-blue-200",
    Completed: "bg-green-100 text-green-800 border-green-200",
    Cancelled: "bg-red-100 text-red-800 border-red-200"
  };

  const departmentColors = {
    Cardiology: "bg-red-50 text-red-700 border-red-200",
    Neurology: "bg-purple-50 text-purple-700 border-purple-200",
    Orthopedics: "bg-orange-50 text-orange-700 border-orange-200",
    Pediatrics: "bg-pink-50 text-pink-700 border-pink-200",
    "General Medicine": "bg-blue-50 text-blue-700 border-blue-200",
    Emergency: "bg-red-50 text-red-700 border-red-200",
    Surgery: "bg-gray-50 text-gray-700 border-gray-200"
  };

  return (
    <Card className="border-none shadow-lg">
      <CardHeader className="border-b bg-gradient-to-r from-blue-50 to-green-50">
        <CardTitle className="text-xl font-bold flex items-center gap-2">
          <Calendar className="w-5 h-5" />
          Appointments ({appointments.length})
        </CardTitle>
      </CardHeader>
      <CardContent className="p-6">
        {isLoading ? (
          <div className="space-y-4">
            {[1, 2, 3, 4].map((i) => (
              <div key={i} className="p-4 border rounded-lg">
                <Skeleton className="h-6 w-32 mb-2" />
                <Skeleton className="h-4 w-48 mb-2" />
                <Skeleton className="h-4 w-24" />
              </div>
            ))}
          </div>
        ) : appointments.length === 0 ? (
          <div className="text-center py-12">
            <Calendar className="w-16 h-16 text-gray-300 mx-auto mb-4" />
            <p className="text-gray-500 text-lg">No appointments found</p>
            <p className="text-gray-400 text-sm mt-2">Schedule a new appointment to get started</p>
          </div>
        ) : (
          <div className="grid gap-4">
            {appointments.map((appointment) => (
              <motion.div
                key={appointment.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                className="p-6 border-2 border-gray-200 rounded-lg hover:shadow-md transition-all bg-white"
              >
                <div className="flex items-start justify-between gap-4">
                  <div className="flex-1 space-y-3">
                    <div className="flex items-center gap-3 flex-wrap">
                      <div className="flex items-center gap-2">
                        <User className="w-5 h-5 text-gray-400" />
                        <span className="font-bold text-gray-900 text-lg">{appointment.patient_name}</span>
                      </div>
                      <Badge className={`${statusColors[appointment.status]} border`}>
                        {appointment.status}
                      </Badge>
                      <Badge variant="outline" className={`${departmentColors[appointment.department]} border`}>
                        {appointment.department}
                      </Badge>
                    </div>

                    <div className="flex flex-wrap gap-4 text-sm text-gray-600">
                      <div className="flex items-center gap-2">
                        <Stethoscope className="w-4 h-4" />
                        <span>Dr. {appointment.doctor_name}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Calendar className="w-4 h-4" />
                        <span>{format(new Date(appointment.date), "EEEE, MMM d, yyyy")}</span>
                      </div>
                      <div className="flex items-center gap-2">
                        <Clock className="w-4 h-4" />
                        <span>{appointment.time}</span>
                      </div>
                    </div>

                    {appointment.notes && (
                      <p className="text-sm text-gray-600 bg-gray-50 p-3 rounded-lg">
                        <span className="font-medium">Notes:</span> {appointment.notes}
                      </p>
                    )}
                  </div>

                  {canModify && (
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" size="icon">
                          <MoreVertical className="w-4 h-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuItem onClick={() => onEdit(appointment)}>
                          <Edit className="w-4 h-4 mr-2" />
                          Edit
                        </DropdownMenuItem>
                        {appointment.status !== "Completed" && (
                          <DropdownMenuItem onClick={() => onStatusChange(appointment, "Completed")}>
                            <CheckCircle className="w-4 h-4 mr-2" />
                            Mark Completed
                          </DropdownMenuItem>
                        )}
                        {appointment.status !== "Cancelled" && (
                          <DropdownMenuItem onClick={() => onStatusChange(appointment, "Cancelled")}>
                            <XCircle className="w-4 h-4 mr-2" />
                            Cancel
                          </DropdownMenuItem>
                        )}
                        <DropdownMenuItem
                          onClick={() => onDelete(appointment)}
                          className="text-red-600"
                        >
                          <Trash2 className="w-4 h-4 mr-2" />
                          Delete
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                  )}
                </div>
              </motion.div>
            ))}
          </div>
        )}
      </CardContent>
    </Card>
  );
}